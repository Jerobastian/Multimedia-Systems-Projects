package main;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.image.BufferedImage;

/**
 *
 * @author jcc
 */
public class Lienzo extends javax.swing.JPanel
{
    public Lienzo()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    private Tool tool = Tool.DRAW;
    private Color activeColor = Color.black;
    private boolean fill = false;
    private Image image = null;
    
    @Override
    public void paint(Graphics g)
    {
        super.paint(g);
        if(image != null)
        {
            g.drawImage(image, 0, 0, this.getWidth(), this.getHeight(), this);
            setOpaque(false);
        }

        g.setColor(activeColor);
        
    }
    
    public void draw(Point startPoint, Point endPoint)
    {
        int width =  endPoint.x- startPoint.x;
        int height = endPoint.y - startPoint.y;
        
        switch(this.tool)
        {
            case DRAW:
                this.getGraphics().fillOval(endPoint.x - 5, endPoint.y - 5, 10, 10);
            case LINE:
                this.getGraphics().drawLine(startPoint.x, startPoint.y, endPoint.x, endPoint.y);
                break;
            case RECTANGLE:
                if(this.fill)
                    this.getGraphics().fillRect(startPoint.x, startPoint.y, width, height);
                else
                    this.getGraphics().drawRect(startPoint.x, startPoint.y, width, height);
                break;
            case OVAL:
                if(this.fill)
                    this.getGraphics().fillOval(startPoint.x, startPoint.y, width, height);
                else
                    this.getGraphics().drawOval(startPoint.x, startPoint.y, width, height);
                break;
        }
        
        repaint();
    }
    
    public void setActiveColor(Color c)
    {
        this.activeColor = c;
    }
    
    public Color getActiveColor()
    {
        return this.activeColor;
    }
    
    public void setTool(Tool t)
    {
        this.tool = t;
    }
    
    public Tool getTool()
    {
        return this.tool;
    }
    
    public void setImage(Image newImage)
    {
        this.image = newImage;
    }
    
    public Image getImage()
    {
        return this.image;
    }
    
    public void changeFill()
    {
        this.fill = !this.fill;
    }
    
    public boolean isFill()
    {
        return this.fill;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
